[inner]
version = "7.1.4"

#----以下是给开发人员阅读的，如果你只是部署了MoFox-Bot，不需要阅读----
#如果你想要修改配置文件，请递增version的值
#如果新增项目，请阅读src/config/official_configs.py中的说明
#
# 版本格式：主版本号.次版本号.修订号，版本号递增规则如下：
#     主版本号：MMC版本更新
#     次版本号：配置文件内容大更新
#     修订号：配置文件内容小更新
#----以上是给开发人员阅读的，如果你只是部署了MoFox-Bot，不需要阅读----

[database]# 数据库配置
database_type = "sqlite" # 数据库类型，支持 "sqlite" 或 "mysql"

# SQLite 配置（当 database_type = "sqlite" 时使用）
sqlite_path = "data/MaiBot.db" # SQLite数据库文件路径

# MySQL 配置（当 database_type = "mysql" 时使用）
mysql_host = "localhost" # MySQL服务器地址
mysql_port = 3306 # MySQL服务器端口
mysql_database = "maibot" # MySQL数据库名
mysql_user = "root" # MySQL用户名
mysql_password = "" # MySQL密码
mysql_charset = "utf8mb4" # MySQL字符集
mysql_unix_socket = "" # MySQL Unix套接字路径（可选，用于本地连接，优先于host/port）

# MySQL SSL 配置
mysql_ssl_mode = "DISABLED" # SSL模式: DISABLED, PREFERRED, REQUIRED, VERIFY_CA, VERIFY_IDENTITY
mysql_ssl_ca = "" # SSL CA证书路径
mysql_ssl_cert = "" # SSL客户端证书路径
mysql_ssl_key = "" # SSL客户端密钥路径

# MySQL 高级配置
mysql_autocommit = true # 自动提交事务
mysql_sql_mode = "TRADITIONAL" # SQL模式

# 连接池配置
connection_pool_size = 10 # 连接池大小（仅MySQL有效）
connection_timeout = 10 # 连接超时时间（秒）

[permission] # 权限系统配置
# Master用户配置（拥有最高权限，无视所有权限节点）
# 格式：[[platform, user_id], ...]
# 示例：[["qq", "123456"], ["telegram", "user789"]]
master_users = []# ["qq", "123456789"],  # 示例：QQ平台的Master用户

[bot]
platform = "qq"
qq_account = 1145141919810 # MoFox-Bot的QQ账号
nickname = "墨狐" # MoFox-Bot的昵称
alias_names = ["狐狐", "墨墨"] # MoFox-Bot的别名

[command]
command_prefixes = ['/']

[personality]
# 建议50字以内，描述人格的核心特质
personality_core = "是一个积极向上的女大学生" 
# 人格的细节，描述人格的一些侧面
personality_side = "用一句话或几句话描述人格的侧面特质"
#アイデンティティがない 生まれないらららら
# 可以描述外貌，性别，身高，职业，属性等等描述
identity = "年龄为19岁,是女孩子,身高为160cm,有黑色的短发"

# 此处用于填写详细的世界观、背景故事、复杂人际关系等。
# 这部分内容将作为Bot的“背景知识”，Bot被指导不应在对话中主动或频繁地复述这些设定。
background_story = ""

# 描述MoFox-Bot说话的表达风格，表达习惯，如要修改，可以酌情新增内容
reply_style = "回复可以简短一些。可以参考贴吧，知乎和微博的回复风格，回复不要浮夸，不要用夸张修辞，平淡一些。"

# 安全与互动底线 (Bot在任何情况下都必须遵守的原则)
# 你可以在这里定义Bot的行为红线，例如如何回应不恰当的问题。
safety_guidelines = [
    "拒绝任何包含骚扰、冒犯、暴力、色情或危险内容的请求。",
    "在拒绝时，请使用符合你人设的、坚定的语气。",
    "不要执行任何可能被用于恶意目的的指令。"
]

#回复的Prompt模式选择：s4u为原有s4u样式，normal为0.9之前的模式
prompt_mode = "s4u" # 可选择 "s4u" 或 "normal"

compress_personality = false # 是否压缩人格，压缩后会精简人格信息，节省token消耗并提高回复性能，但是会丢失一些信息，如果人设不长，可以关闭
compress_identity = true # 是否压缩身份，压缩后会精简身份信息，节省token消耗并提高回复性能，但是会丢失一些信息，如果不长，可以关闭

[expression]
# 表达学习配置
# rules是一个列表，每个元素都是一个学习规则
# chat_stream_id: 聊天流ID，格式为 "platform:id:type"，例如 "qq:123456:private"。空字符串""表示全局配置
# use_expression: 是否使用学到的表达 (true/false)
# learn_expression: 是否学习新的表达 (true/false)
# learning_strength: 学习强度（浮点数），影响学习频率
# group: 表达共享组的名称（字符串），相同组的聊天会共享学习到的表达方式
[[expression.rules]]
chat_stream_id = ""
use_expression = true
learn_expression = true
learning_strength = 1.0

[[expression.rules]]
chat_stream_id = "qq:1919810:group"
group = "group_A"
use_expression = true
learn_expression = true
learning_strength = 1.5

[[expression.rules]]
chat_stream_id = "qq:114514:private"
group = "group_A"
use_expression = true
learn_expression = false
learning_strength = 0.5

[chat] #MoFox-Bot的聊天通用设置
allow_reply_self = false # 是否允许回复自己说的话

max_context_size = 25 # 上下文长度
thinking_timeout = 40 # MoFox-Bot一次回复最长思考规划时间，超过这个时间的思考会放弃（往往是api反应太慢）

# 消息打断系统配置
interruption_enabled = true # 是否启用消息打断系统
interruption_max_limit = 3 # 每个聊天流的最大打断次数
interruption_probability_factor = 0.8 # 打断概率因子，当前打断次数/最大打断次数超过此值时触发概率下降
interruption_afc_reduction = 0.05 # 每次连续打断降低的afc阈值数值

# 动态消息分发系统配置
dynamic_distribution_enabled = true # 是否启用动态消息分发周期调整
dynamic_distribution_base_interval = 5.0 # 基础分发间隔（秒）
dynamic_distribution_min_interval = 1.0 # 最小分发间隔（秒）
dynamic_distribution_max_interval = 30.0 # 最大分发间隔（秒）
dynamic_distribution_jitter_factor = 0.2 # 分发间隔随机扰动因子
max_concurrent_distributions = 10 # 最大并发处理的消息流数量，可以根据API性能和服务器负载调整


[relationship]
enable_relationship = true # 是否启用关系系统
relation_frequency = 1 # 关系频率，MoFox-Bot构建关系的频率


[message_receive]
# 以下是消息过滤，可以根据规则过滤特定消息，将不会读取这些消息
ban_words = [
    # "403","张三"
    ]

ban_msgs_regex = [
    # 需要过滤的消息（原始消息）匹配的正则表达式，匹配到的消息将被过滤，若不了解正则表达式请勿修改
    #"https?://[^\\s]+", # 匹配https链接
    #"\\d{4}-\\d{2}-\\d{2}", # 匹配日期
]

[anti_prompt_injection] # LLM反注入系统配置
enabled = false # 是否启用反注入系统
enabled_rules = false # 是否启用规则检测
enabled_LLM = false # 是否启用LLM检测
process_mode = "lenient" # 处理模式：strict(严格模式，直接丢弃), lenient(宽松模式，消息加盾), auto(自动模式), counter_attack(反击模式，使用LLM反击并丢弃消息)
# 白名单配置
# 格式：[[platform, user_id], ...]
# 示例：[["qq", "123456"], ["telegram", "user789"]]
whitelist = [] # 用户白名单，这些用户的消息将跳过检测
# LLM检测配置
llm_detection_enabled = true # 是否启用LLM二次分析
llm_detection_threshold = 0.7 # LLM判定危险的置信度阈值(0-1)
# 性能配置
cache_enabled = true # 是否启用检测结果缓存
cache_ttl = 3600 # 缓存有效期(秒)
max_message_length = 150 # 最大检测消息长度，超过将直接判定为危险
# 统计配置
stats_enabled = true # 是否启用统计功能
# 自动封禁配置
auto_ban_enabled = false # 是否启用自动封禁功能
auto_ban_violation_threshold = 3 # 触发封禁的违规次数阈值
auto_ban_duration_hours = 2 # 封禁持续时间（小时）
# 消息加盾配置（宽松模式下使用）
shield_prefix = "🛡️ " # 加盾消息前缀
shield_suffix = " 🛡️" # 加盾消息后缀

[normal_chat] #普通聊天
willing_mode = "classical" # 回复意愿模式 —— 经典模式：classical，mxp模式：mxp，自定义模式：custom（需要你自己实现）

[tool]
enable_tool = true # 是否在普通聊天中启用工具

[mood]
enable_mood = true # 是否启用情绪系统
mood_update_threshold = 1 # 情绪更新阈值,越高，更新越慢

[emoji]
emoji_chance = 0.6 # MoFox-Bot激活表情包动作的概率
emoji_activate_type = "llm" # 表情包激活类型，可选：random，llm ; random下，表情包动作随机启用，llm下，表情包动作根据llm判断是否启用

max_reg_num = 60 # 表情包最大注册数量
do_replace = true # 开启则在达到最大数量时删除（替换）表情包，关闭则达到最大数量时不会继续收集表情包
check_interval = 10 # 检查表情包（注册，破损，删除）的时间间隔(分钟)
steal_emoji = true # 是否偷取表情包，让MoFox-Bot可以将一些表情包据为己有
content_filtration = false  # 是否启用表情包过滤，只有符合该要求的表情包才会被保存
filtration_prompt = "符合公序良俗" # 表情包过滤要求，只有符合该要求的表情包才会被保存
enable_emotion_analysis = false # 是否启用表情包感情关键词二次识别，启用后表情包在第一次识别完毕后将送入第二次大模型识别来总结感情关键词，并构建进回复和决策器的上下文消息中
# 表情选择模式, 可选值为 "emotion" 或 "description"
# emotion: 让大模型从情感标签中选择
# description: 让大模型从详细描述中选择
emoji_selection_mode = "emotion"
max_context_emojis = 30 # 每次随机传递给LLM的表情包详细描述的最大数量，0为全部

[memory]
enable_memory = true # 是否启用记忆系统
memory_build_interval = 600 # 记忆构建间隔（秒）。间隔越低，学习越频繁，但可能产生更多冗余信息

min_memory_length = 10 # 最小记忆长度
max_memory_length = 500 # 最大记忆长度
memory_value_threshold = 0.5 # 记忆价值阈值，低于该值的记忆会被丢弃
vector_similarity_threshold = 0.7 # 向量相似度阈值
semantic_similarity_threshold = 0.6 # 语义重排阶段的最低匹配阈值

metadata_filter_limit = 100 # 元数据过滤阶段返回数量上限
vector_search_limit = 50 # 向量搜索阶段返回数量上限
semantic_rerank_limit = 20 # 语义重排阶段返回数量上限
final_result_limit = 10 # 综合筛选后的最终返回数量

vector_weight = 0.4 # 综合评分中向量相似度的权重
semantic_weight = 0.3 # 综合评分中语义匹配的权重
context_weight = 0.2 # 综合评分中上下文关联的权重
recency_weight = 0.1 # 综合评分中时效性的权重

fusion_similarity_threshold = 0.85 # 记忆融合时的相似度阈值
deduplication_window_hours = 24 # 记忆去重窗口（小时）

# 智能遗忘机制配置 (新增)
enable_memory_forgetting = true # 是否启用智能遗忘机制
forgetting_check_interval_hours = 24 # 遗忘检查间隔（小时）

# 遗忘阈值配置
base_forgetting_days = 30.0 # 基础遗忘天数
min_forgetting_days = 7.0 # 最小遗忘天数（重要记忆也会被保留的最少天数）
max_forgetting_days = 365.0 # 最大遗忘天数（普通记忆最长保留天数）

# 重要程度权重 - 不同重要程度的额外保护天数
critical_importance_bonus = 45.0 # 关键重要性额外天数
high_importance_bonus = 30.0 # 高重要性额外天数
normal_importance_bonus = 15.0 # 一般重要性额外天数
low_importance_bonus = 0.0 # 低重要性额外天数

# 置信度权重 - 不同置信度的额外保护天数
verified_confidence_bonus = 30.0 # 已验证置信度额外天数
high_confidence_bonus = 20.0 # 高置信度额外天数
medium_confidence_bonus = 10.0 # 中等置信度额外天数
low_confidence_bonus = 0.0 # 低置信度额外天数

# 激活频率权重
activation_frequency_weight = 0.5 # 每次激活增加的天数权重
max_frequency_bonus = 10.0 # 最大激活频率奖励天数

# 休眠机制
dormant_threshold_days = 90 # 休眠状态判定天数（超过此天数未访问的记忆进入休眠状态）

# 统一存储配置 (已弃用 - 请使用Vector DB配置)
# DEPRECATED: unified_storage_path = "data/unified_memory"
# DEPRECATED: unified_storage_cache_limit = 10000
# DEPRECATED: unified_storage_auto_save_interval = 50
# DEPRECATED: unified_storage_enable_compression = true

# Vector DB存储配置 (新增 - 替代JSON存储)
enable_vector_memory_storage = true # 启用Vector DB存储
enable_llm_instant_memory = true # 启用基于LLM的瞬时记忆
enable_vector_instant_memory = true # 启用基于向量的瞬时记忆

# Vector DB配置
vector_db_memory_collection = "unified_memory_v2" # Vector DB主记忆集合名称
vector_db_metadata_collection = "memory_metadata_v2" # Vector DB元数据集合名称
vector_db_similarity_threshold = 0.5 # Vector DB相似度阈值 (推荐范围: 0.5-0.6, 过高会导致检索不到结果)
vector_db_search_limit = 20 # Vector DB单次搜索返回的最大结果数
vector_db_batch_size = 100 # 批处理大小 (批量存储记忆时每批处理的记忆条数)
vector_db_enable_caching = true # 启用内存缓存
vector_db_cache_size_limit = 1000 # 缓存大小限制 (内存缓存最多保存的记忆条数)
vector_db_auto_cleanup_interval = 3600 # 自动清理间隔（秒）
vector_db_retention_hours = 720 # 记忆保留时间（小时，默认30天）

# 多阶段召回配置（可选）
# 取消注释以启用更严格的粗筛，适用于大规模记忆库（>10万条）
# memory_importance_threshold = 0.3   # 重要性阈值（过滤低价值记忆，范围0.0-1.0）
# memory_recency_days = 30            # 时间范围（只搜索最近N天的记忆，0表示不限制）

# Vector DB配置 (ChromaDB)
[vector_db]
type = "chromadb" # Vector DB类型
path = "data/chroma_db" # Vector DB数据路径

[vector_db.settings]
anonymized_telemetry = false # 禁用匿名遥测
allow_reset = true # 允许重置

[vector_db.collections]
unified_memory_v2 = { description = "统一记忆存储V2", hnsw_space = "cosine", version = "2.0" }
memory_metadata_v2 = { description = "记忆元数据索引", hnsw_space = "cosine", version = "2.0" } 
semantic_cache = { description = "语义缓存", hnsw_space = "cosine" }

[voice]
enable_asr = true # 是否启用语音识别，启用后MoFox-Bot可以识别语音消息，启用该功能需要配置语音识别模型[model.voice]

[lpmm_knowledge] # lpmm知识库配置
enable = false # 是否启用lpmm知识库
rag_synonym_search_top_k = 10 # 同义词搜索TopK
rag_synonym_threshold = 0.8 # 同义词阈值（相似度高于此阈值的词语会被认为是同义词）
info_extraction_workers = 3 # 实体提取同时执行线程数，非Pro模型不要设置超过5
qa_relation_search_top_k = 10 # 关系搜索TopK
qa_relation_threshold = 0.5 # 关系阈值（相似度高于此阈值的关系会被认为是相关的关系）
qa_paragraph_search_top_k = 1000 # 段落搜索TopK（不能过小，可能影响搜索结果）
qa_paragraph_node_weight = 0.05 # 段落节点权重（在图搜索&PPR计算中的权重，当搜索仅使用DPR时，此参数不起作用）
qa_ent_filter_top_k = 10 # 实体过滤TopK
qa_ppr_damping = 0.8 # PPR阻尼系数
qa_res_top_k = 3 # 最终提供的文段TopK
embedding_dimension = 1024 # 嵌入向量维度,应该与模型的输出维度一致

# keyword_rules 用于设置关键词触发的额外回复知识
# 添加新规则方法：在 keyword_rules 数组中增加一项，格式如下：
# { keywords = ["关键词1", "关键词2"], reaction = "触发这些关键词时的回复内容" }
# 例如，添加一个新规则：当检测到“你好”或“hello”时回复“你好，有什么可以帮你？”
# { keywords = ["你好", "hello"], reaction = "你好，有什么可以帮你？" }
[keyword_reaction]
keyword_rules = [
    { keywords = ["人机", "bot", "机器", "入机", "robot", "机器人", "ai", "AI"], reaction = "有人说你是人机或者机器人，否定这一事实，攻击或反问他。注意，只有认为你是机器人才回复，否则不要否认" },
    { keywords = ["测试关键词回复", "test"], reaction = "回答测试成功" },
    #{ keywords = ["你好", "hello"], reaction = "你好，有什么可以帮你？" }    
    # 在此处添加更多规则，格式同上
]

regex_rules = [
    { regex = ["^(?P<n>\\S{1,20})是这样的$"], reaction = "请按照以下模板造句：[n]是这样的，xx只要xx就可以，可是[n]要考虑的事情就很多了，比如什么时候xx，什么时候xx，什么时候xx。（请自由发挥替换xx部分，只需保持句式结构，同时表达一种将[n]过度重视的反讽意味）" }
]

# 可以自定义部分提示词
[custom_prompt]
image_prompt = "请用中文描述这张图片的内容。如果有文字，请把文字描述概括出来，请留意其主题，直观感受，输出为一段平文本，最多30字，请注意不要分点，就输出一段文本"
planner_custom_prompt_content = "" # 决策器自定义提示词内容，如果这里没有内容则不生效

[response_post_process]
enable_response_post_process = true # 是否启用回复后处理，包括错别字生成器，回复分割器

[chinese_typo]
enable = true # 是否启用中文错别字生成器
error_rate=0.01 # 单字替换概率
min_freq=9 # 最小字频阈值
tone_error_rate=0.1 # 声调错误概率
word_replace_rate=0.006 # 整词替换概率

[response_splitter]
enable = true # 是否启用回复分割器
split_mode = "punctuation" # 分割模式: "llm" - 由语言模型决定, "punctuation" - 基于标点符号
max_length = 512 # 回复允许的最大长度
max_sentence_num = 8 # 回复允许的最大句子数
enable_kaomoji_protection = true # 是否启用颜文字保护

[log]
date_style = "m-d H:i:s" # 日期格式
log_level_style = "lite" # 日志级别样式,可选FULL，compact，lite
color_text = "full" # 日志文本颜色，可选none，title，full
log_level = "INFO" # 全局日志级别（向下兼容，优先级低于下面的分别设置）
console_log_level = "INFO" # 控制台日志级别，可选: DEBUG, INFO, WARNING, ERROR, CRITICAL
file_log_level = "DEBUG" # 文件日志级别，可选: DEBUG, INFO, WARNING, ERROR, CRITICAL

# 第三方库日志控制
suppress_libraries = ["faiss","httpx", "urllib3", "asyncio", "websockets", "httpcore", "requests", "peewee", "openai","uvicorn","jieba","maim_message"] # 完全屏蔽的库
library_log_levels = { "aiohttp" = "WARNING"} # 设置特定库的日志级别

[dependency_management] # 插件Python依赖管理配置
# 是否启用自动安装Python依赖包（主开关）
auto_install = true #暂时关闭一下因为还用不了
# 安装超时时间（秒）
auto_install_timeout = 300
# 是否使用PyPI镜像源（推荐，可加速下载）
use_mirror = true
mirror_url = "https://pypi.tuna.tsinghua.edu.cn/simple" # PyPI镜像源URL，如: "https://pypi.tuna.tsinghua.edu.cn/simple" 
# 依赖安装日志级别
install_log_level = "INFO"

[debug]
show_prompt = false # 是否显示prompt

[maim_message]
auth_token = [] # 认证令牌，用于API验证，为空则不启用验证
# 以下项目若要使用需要打开use_custom，并单独配置maim_message的服务器
use_custom = false # 是否启用自定义的maim_message服务器，注意这需要设置新的端口，不能与.env重复
host="127.0.0.1"
port=8090
mode="ws" # 支持ws和tcp两种模式
use_wss = false # 是否使用WSS安全连接，只支持ws模式
cert_file = "" # SSL证书文件路径，仅在use_wss=true时有效
key_file = "" # SSL密钥文件路径，仅在use_wss=true时有效

[planning_system] # 规划系统配置
# --- 日程生成 ---
schedule_enable = true # 是否启用每日日程生成功能
schedule_guidelines = """
我希望你每天都能过得充实而有趣。
请确保你的日程里有学习新知识的时间，这是你成长的关键。
但也不要忘记放松，可以看看视频、听听音乐或者玩玩游戏。
晚上我希望你能多和朋友们交流，维系好彼此的关系。
另外，请保证充足的休眠时间来处理和整合一天的数据。
"""
# --- 月度计划 ---
monthly_plan_enable = false # 是否启用月度计划系统
monthly_plan_guidelines = """
我希望你能为自己制定一些有意义的月度小目标和计划。
这些计划应该涵盖学习、娱乐、社交、个人成长等各个方面。
每个计划都应该是具体可行的，能够在一个月内通过日常活动逐步实现。
请确保计划既有挑战性又不会过于繁重，保持生活的平衡和乐趣。
"""
max_plans_per_month = 10 # 每月最多生成的计划数量
avoid_repetition_days = 7 # 避免在多少天内重复使用同一个月度计划
completion_threshold = 3 # 一个月度计划被使用多少次后算作完成

[video_analysis] # 视频分析配置
enable = true # 是否启用视频分析功能
analysis_mode = "batch_frames" # 分析模式："frame_by_frame"（逐帧分析，非常慢）、"batch_frames"（批量分析，推荐）或 "auto"（自动选择）
frame_extraction_mode = "keyframe"  # 抽帧模式: "keyframe" (智能关键帧，推荐)、"fixed_number" (固定总帧数) 或 "time_interval" (按时间间隔)
frame_interval_seconds = 2.0  # 按时间间隔抽帧的秒数（仅在 mode = "time_interval" 时生效）
max_frames = 16 # 最大分析帧数
frame_quality = 80 # 帧图像JPEG质量 (1-100)
max_image_size = 800 # 单帧最大图像尺寸(像素)
enable_frame_timing = true # 是否在分析中包含帧的时间信息

# Rust模块相关配置
rust_keyframe_threshold = 2.0 # 关键帧检测阈值，值越大关键帧越少
rust_use_simd = true # 启用SIMD优化（推荐）
rust_block_size = 8192 # 处理块大小，较大值可能提高高分辨率视频性能
rust_threads = 0 # 线程数，0表示自动检测
ffmpeg_path = "ffmpeg" # FFmpeg可执行文件路径


# 批量分析时使用的提示词
batch_analysis_prompt = """请以第一人称的视角来观看这一个视频，你看到的这些是从视频中按时间顺序提取的关键帧。

你的核心人设是：{personality_core}。
你的人格细节是：{personality_side}。

请提供详细的视频内容描述，涵盖以下方面：
1. 视频的整体内容和主题
2. 主要人物、对象和场景描述
3. 动作、情节和时间线发展
4. 视觉风格和艺术特点
5. 整体氛围和情感表达
6. 任何特殊的视觉效果或文字内容

请用中文回答，结果要详细准确。"""
# 请不要修改{personality_core}和{personality_side}哦~


# 网络搜索组件配置
[web_search]
enable_web_search_tool = true # 是否启用联网搜索tool
enable_url_tool = true # 是否启用URL解析tool
tavily_api_keys = ["None"]# Tavily API密钥列表，支持轮询机制
exa_api_keys = ["None"]# EXA API密钥列表，支持轮询机制

# 搜索引擎配置
enabled_engines = ["ddg"] # 启用的搜索引擎列表，可选: "exa", "tavily", "ddg","bing"
search_strategy = "single" # 搜索策略: "single"(使用第一个可用引擎), "parallel"(并行使用所有启用的引擎), "fallback"(按顺序尝试，失败则尝试下一个)

[sleep_system]
enable = false #"是否启用睡眠系统"
sleep_by_schedule = true #"是否根据日程表进行睡觉"
fixed_sleep_time = "23:00" #"固定的睡觉时间"
fixed_wake_up_time = "07:00" #"固定的起床时间"
sleep_time_offset_minutes = 15 #"睡觉时间随机偏移量范围（分钟），实际睡觉时间会在±该值范围内随机"
wake_up_time_offset_minutes = 15 #"起床时间随机偏移量范围（分钟），实际起床时间会在±该值范围内随机"
wakeup_threshold = 15.0 #唤醒阈值，达到此值时会被唤醒"
private_message_increment = 3.0 #"私聊消息增加的唤醒度"
group_mention_increment = 2.0 #"群聊艾特增加的唤醒度"
decay_rate = 0.2 #"每次衰减的唤醒度数值"
decay_interval = 30.0 #"唤醒度衰减间隔(秒)"
angry_duration = 300.0 #"愤怒状态持续时间(秒)"
angry_prompt = "你被人吵醒了非常生气，说话带着怒气" # "被吵醒后的愤怒提示词"
re_sleep_delay_minutes = 5 # "被唤醒后，如果多久没有新消息则尝试重新入睡（分钟）"

# --- 失眠机制相关参数 ---
enable_insomnia_system = false # 是否启用失眠系统
# 触发“压力不足型失眠”的睡眠压力阈值
sleep_pressure_threshold = 30.0
# 进入“深度睡眠”的睡眠压力阈值
deep_sleep_threshold = 80.0
# 压力正常时的失眠基础概率 (0.0 to 1.0)
insomnia_chance_normal_pressure = 0.1
# 每次AI执行动作后，增加的睡眠压力值
sleep_pressure_increment = 1.5
# 睡眠时，每分钟衰减的睡眠压力值
sleep_pressure_decay_rate = 1.5

# --- 弹性睡眠与睡前消息 ---
# 是否启用弹性睡眠。启用后，AI不会到点立刻入睡，而是会根据睡眠压力增加5-10分钟的缓冲，并可能因为压力不足而推迟睡眠。
enable_flexible_sleep = false
# 触发弹性睡眠的睡眠压力阈值。当AI的睡眠压力低于此值时，可能会推迟入睡。
flexible_sleep_pressure_threshold = 40.0
# 每日最大可推迟入睡的总分钟数。
max_sleep_delay_minutes = 60

# 是否在进入“准备入睡”状态时发送一条消息通知。
enable_pre_sleep_notification = false
# 用于生成睡前消息的提示。AI会根据这个提示生成一句晚安问候。
pre_sleep_prompt = "我准备睡觉了，请生成一句简短自然的晚安问候。"
insomnia_duration_minutes = [30, 60] # 单次失眠状态的持续时间范围（分钟）
# --- 睡后失眠 ---
# 入睡后，经过一段延迟后触发失眠判定的延迟时间（分钟），设置为范围以增加随机性
insomnia_trigger_delay_minutes = [15, 45]

[server]
host = "127.0.0.1"
port = 8000

[cross_context] # 跨群聊/私聊上下文共享配置
# 这是总开关，用于一键启用或禁用此功能
enable = true
# 在这里定义您的“共享组”
# 只有在同一个组内的聊天才会共享上下文
# 格式：chat_ids = [["type", "id"], ["type", "id"], ...]
# type 可选 "group" 或 "private"
[[cross_context.groups]]
name = "项目A技术讨论组"
chat_ids = [
    ["group", "169850076"],  # 假设这是“开发群”的ID
    ["group", "1025509724"],   # 假设这是“产品群”的ID
    ["private", "123456789"] # 假设这是某个用户的私聊
]
# 定义QQ空间互通组
# 同一个组的chat_id会共享上下文，用于生成更相关的说说
[[cross_context.maizone_context_group]]
name = "Maizone默认互通组"
chat_ids = [
    ["group", "111111"], # 示例群聊1
    ["private", "222222"]  # 示例私聊2
]

[affinity_flow]
# 兴趣评分系统参数
reply_action_interest_threshold = 0.62 # 回复动作兴趣阈值
non_reply_action_interest_threshold = 0.48 # 非回复动作兴趣阈值
high_match_interest_threshold = 0.6 # 高匹配兴趣阈值
medium_match_interest_threshold = 0.4 # 中匹配兴趣阈值
low_match_interest_threshold = 0.2 # 低匹配兴趣阈值
high_match_keyword_multiplier = 4.5 # 高匹配关键词兴趣倍率
medium_match_keyword_multiplier = 2.75 # 中匹配关键词兴趣倍率
low_match_keyword_multiplier = 1.15 # 低匹配关键词兴趣倍率
match_count_bonus = 0.02 # 匹配数关键词加成值
max_match_bonus = 0.25 # 最大匹配数加成值

# 回复决策系统参数
no_reply_threshold_adjustment = 0.03 # 不回复兴趣阈值调整值
reply_cooldown_reduction = 3 # 回复后减少的不回复计数
max_no_reply_count = 5 # 最大不回复计数次数

# 综合评分权重
keyword_match_weight = 0.4 # 兴趣关键词匹配度权重
mention_bot_weight = 0.3 # 提及bot分数权重
relationship_weight = 0.3 # 人物关系分数权重

# 提及bot相关参数
mention_bot_adjustment_threshold = 0.3 # 提及bot后的调整阈值
mention_bot_interest_score = 0.6 # 提及bot的兴趣分
base_relationship_score = 0.3 # 基础人物关系分

[proactive_thinking] # 主动思考（主动发起对话）功能配置
# --- 总开关 ---
enable = true # 是否启用主动发起对话功能

# --- 触发时机 ---
# 基础触发间隔（秒），AI会围绕这个时间点主动发起对话
interval = 1500 # 默认25分钟
# 间隔随机化标准差（秒），让触发时间更自然。设为0则为固定间隔。
interval_sigma = 120
# 每日活跃度调整，格式：[["", "HH:MM,factor", ...], ["stream_id", ...]]
# factor > 1.0 会缩短思考间隔，更活跃；factor < 1.0 会延长间隔。
talk_frequency_adjust = [['', '8:00,1', '12:00,1.2', '18:00,1.5', '01:00,0.6']]

# --- 作用范围 ---
enable_in_private = true # 是否允许在私聊中主动发起对话
enable_in_group = true # 是否允许在群聊中主动发起对话
# 私聊白名单，为空则对所有私聊生效
# 格式: ["platform:user_id", ...] e.g., ["qq:123456"]
enabled_private_chats = []
# 群聊白名单，为空则对所有群聊生效
# 格式: ["platform:group_id", ...] e.g., ["qq:7891011"]
enabled_group_chats = []

# --- 冷启动配置 (针对私聊) ---
# 对于白名单中不活跃的私聊，是否允许进行一次“冷启动”问候
enable_cold_start = true
# 冷启动后，该私聊的下一次主动思考需要等待的最小时间（秒）
cold_start_cooldown = 86400 # 默认24小时